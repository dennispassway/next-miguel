import fg from "fast-glob";
import fs from "fs";
import notify from "../utils/notify";
import path from "path";

export default async ({ extension, gitignore, page }) => {
  notify("compiling styleguide...");

  const filePaths = await fg([`**/*${extension}`], { onlyFiles: true });
  const components = await Promise.all(filePaths.map(getComponentsForfile));
  const flattenedComponents = [].concat.apply([], components);

  writeTemplateToFile({ components: flattenedComponents, page });

  if (gitignore !== false) {
    addToGitignore({ page });
  }
};

async function getComponentsForfile(filePath) {
  const globalExportRegex = /export ([^\s]+) ([^\s\(\=]+)/g;
  const localExportRegex = /export ([^\s]+) ([^\s\(\=]+)/;

  const fileContents = await readFile(filePath);
  const matchedStrings = fileContents.match(globalExportRegex);

  if (!matchedStrings || !matchedStrings.length) {
    return [];
  }

  return matchedStrings.map((string) => {
    const [, , component] = string.match(localExportRegex);
    const importString = `import { ${component} } from "${filePath}"`;
    return { importString, component };
  });
}

async function readFile(filePath) {
  return new Promise((resolve, reject) =>
    fs.readFile(filePath, "utf8", (err, data) => {
      if (err) reject(err);
      resolve(data);
    })
  );
}

function writeTemplateToFile({ components, page }) {
  const template = generateTemplate({ components, page });

  const pagesPath = path.join(path.resolve("."), "pages");
  const targetPath = path.join(pagesPath, `${page}.js`);

  if (!fs.existsSync(pagesPath)) {
    fs.mkdirSync(pagesPath);
  }

  fs.writeFile(targetPath, template, "utf8", (err) => {
    if (err) {
      throw err;
    }

    notify("styleguide compiled successfully");
  });
}

function addToGitignore({ page }) {
  const gitgnorePath = path.join(path.resolve("."), ".gitignore");
  const pagePath = `pages/${page}.js`;

  if (!fs.existsSync(gitgnorePath)) {
    fs.writeFile(gitgnorePath, pagePath, "utf8", (err) => {
      if (err) {
        throw err;
      }

      notify(`created .gitignore with ${pagePath}`);
    });
  } else {
    const content = fs.readFileSync(gitgnorePath, "utf8");
    const rules = content.split("\n");
    const foundRule = rules.find((rule) => rule === pagePath);

    if (foundRule) {
      return;
    }

    rules.push(pagePath);

    const newContent = rules.join("\n");

    fs.writeFile(gitgnorePath, newContent, "utf8", (err) => {
      if (err) {
        throw err;
      }

      notify(`added ${pagePath} to .gitignore`);
    });
  }
}

function generateTemplate({ components, page }) {
  return `
    /* This page is automatically generated by next-miguel. Manual changes will probably be overwritten. */

    import { MiguelContext, StyleGuide } from "next-miguel/components";
    import { useRouter } from "next/router";
    ${components.map(({ importString }) => importString).join("\n")}

    const Miguel = () => {
      const {
        query: { id },
      } = useRouter();

      const componentMap = {
        ${components
          .map(({ component }) => `'${component}': ${component}`)
          .join(",\n")}
      };

      if (id) {
        const Element = componentMap[id];

        return (
          <MiguelContext.Provider value={{ miguelRoot: '${page}', componentId: id }}>
            <StyleGuide clean>
              {!Element ? <div>An example for component '{id}' could not be found...</div> : <Element />}
            </StyleGuide>
          </MiguelContext.Provider>
        );
      }

      return (
        <MiguelContext.Provider value={{ miguelRoot: '${page}', componentId: id }}>
          <StyleGuide>
            ${components
              .map(({ component }) => `<${component} id='${component}' />`)
              .join("\n")}
          </StyleGuide>
        </MiguelContext.Provider>
      );
    };

    export default Miguel;
  `;
}
